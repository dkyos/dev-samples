// ./gradlew -q cmd1 -PITER=200
// ./gradlew -q c1 -PITER=300
// ./gradlew -q cmd2 -PITER=400
// ./gradlew -q c2 -PITER=500

import org.apache.tools.ant.taskdefs.condition.Os

defaultTasks 'checkWin'

task checkWin() {
    def CMD_PATH='';

    println ("================================");
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "*** Windows";
        CMD_PATH='C:/tizen-2.4-sdk/tools/sdb';
    }else{
        println "*** Not Windwos";
        CMD_PATH='/home/dkyun77/tizen-sdk/tools/sdb';
    }

    project.ext.set("sdbPath", "${CMD_PATH}");
    println (" sdb: " + project.sdbPath);

    int iter = 0;

    if( project.hasProperty("ITER")) {
        iter = "${ITER}".toInteger();
    }else{
        iter = 10;
    }

    project.ext.set("iter", iter);
    println (" iteration: " + project.iter);
    println ("================================");
}

task cmd1(dependsOn: checkWin) << {
    int i = 0;
    def CMD = project.sdbPath;
    def sout = new StringBuilder()
    def serr = new StringBuilder()

    while ( i < project.iter ){
        println ("Iteration: " + i++);
        def process = ["${CMD}","shell", "ls -alh"].execute();
        process.consumeProcessOutput(sout, serr)
        process.waitFor();
        println ("Exit value: " + process.exitValue());
        println "$sout"
        println "$serr"
    }
}

task cmd2(dependsOn: checkWin) << {
    int i = 0;
    def CMD = project.sdbPath;
    def sout = new StringBuilder()
    def serr = new StringBuilder()

    while ( i < project.iter ){
        println ("Iteration: " + i++);
        def process = ["${CMD}","shell", "pkgcmd -l"].execute();
        process.consumeProcessOutput(sout, serr)
        process.waitFor();
        println ("Exit value: " + process.exitValue());
        println "$sout"
        println "$serr"
    }
}

task cmd3(dependsOn: checkWin) << {
    int i = 0;
    def CMD = project.sdbPath;
    def sout = new StringBuilder()
    def serr = new StringBuilder()

    while ( i < project.iter ){
        println ("Iteration: " + i++);
        def process = ["${CMD}","shell", "dump_systemstate"].execute();
        process.consumeProcessOutput(sout, serr)
        process.waitFor();
        println ("Exit value: " + process.exitValue());
        println "$sout"
        println "$serr"
    }
}


task push1(dependsOn: checkWin) << {
    int i = 0;
    def CMD = project.sdbPath;
    def sout = new StringBuilder()
    def serr = new StringBuilder()

    File file = new File("test.txt")

    while ( i < project.iter ){
        println ("Iteration: " + i++);
        def process = ["${CMD}","shell", "dump_systemstate"].execute();
        process.consumeProcessOutput(sout, serr)
        process.waitFor();
        println ("Exit value: " + process.exitValue());

        file << "$sout"
        process = ["${CMD}","push", "test.txt", "/home/developer"].execute();
        process.consumeProcessOutput(sout, serr)
        process.waitFor();
        sout.setLength(0);
        serr.setLength(0);

        process = ["${CMD}","shell", "ls -al /home/developer"].execute();
        process.consumeProcessOutput(sout, serr)
        process.waitFor();
        println "$sout"
        println "$serr"
    }

    file.delete();
}


